---
// Header.astro
import Login from '../modales/Login.astro';
import Registro from '../modales/Registro.astro';

const { logoSrc, titleLine1, titleLine2, registerButtonText, loginButtonText, user, role } = Astro.props;

import { checkUserRole } from "../../pages/api/auth/roleBasedRedirect";

//Verificar el rol del usuario y obtener su información
const userData = await checkUserRole(Astro, ["admin", "user", "guest"]);
---

<header class="bg-customBlue text-white py-2">
  <div class="container flex flex-row justify-between items-center mx-auto px-2 space-x-0">
    <!-- Logo y Título -->
    <div class="flex items-center text-left | md:flex-row md:items-center gap-2 | md:gap-4">
      <a href="/">
        <img src={logoSrc} alt="Logo CECH" class="h-14 w-auto sm:h-[4.5rem] md:h-20 lg:h-24" />
      </a>
      <a href="/">
        <h1 class="text-left text-xs tracking-wide font-medium leading-tight 
          sm:text-lg sm:leading-5
          md:text-xl md:leading-6 
          lg:text-2xl lg:leading-7">
          {titleLine1}
          <br />
          <span class="block text-left | md:text-left">
            {titleLine2}
          </span>
        </h1>
      </a>
    </div>

    <!-- Menú de usuario o botones -->
    <div class="flex items-center">
      {!user ? (
        // Mostrar botones de registro y login si no hay usuario
        <div class="flex flex-col space-y-2 | sm:space-y-0 sm:flex-row sm:space-x-2">
          <button id="register-button" class="bg-customBlue hover:scale-105 transition duration-300 ease-in-out border-[3px] border-customCyan rounded-full text-white font-bold text-[10px] | sm:text-xs | md:text-sm | lg:text-sm px-2 py-1 h-7 w-26 | sm:h-8 sm:w-32 | md:h-9 md:w-36 | lg:h-9 lg:w-40">
            {registerButtonText}
          </button>
          <button id="login-button" class="bg-customCyan hover:scale-105 transition duration-300 ease-in-out border-[3px] border-customCyan rounded-full text-customBlack font-extrabold text-[9px] | sm:text-xs | md:text-sm | lg:text-sm px-2 py-1 h-7 w-26 | sm:h-8 sm:w-32 | md:h-9 md:w-36 | lg:h-9 lg:w-40">
            {loginButtonText}
          </button>
        </div>
      ) : (
        // Mostrar avatar y menú si el usuario está autenticado
        <div class="flex items-center relative">
          <h1 class="text-md text-white font-bold">
            {/* Mostrar mensaje dependiendo del rol */}
            {!user ? (
                    <span>¡Bienvenido! Amante de la Medicina</span>
                ) : role === "guest" ? (
                    <span>{userData.name}</span>
                ) : role === "admin" ? (
                    <span>{userData.name}</span>
                ) : role === "user" ? (
                    <span>{userData.name}</span>
                ) : null}
          </h1>
          <img
            src="https://i.pinimg.com/enabled_hi/564x/52/25/22/522522b4ef8de61225ad8bb0df48451b.jpg"
            alt="Avatar"
            class="w-10 h-10 rounded-full cursor-pointer ml-4"
            id="avatar"
            aria-haspopup="true"
          />
          <div id="dropdown-menu" class="hidden absolute right-0 mt-40 w-48 bg-white rounded-lg shadow-xl z-50">
            <ul class="p-2">
              {role === "admin" && <li><a href="/routes/profileAdmin" class="block p-2 text-sm text-gray-900 rounded-lg hover:bg-gray-200 w-full text-left">Perfil</a></li>}
              {role === "user" && <li><a href="/routes/profileUser" class="block p-2 text-sm text-gray-900 rounded-lg hover:bg-gray-200 w-full text-left">Perfil</a></li>}
              {role === "guest" && <li><a href="/routes/profileGuest" class="block p-2 text-sm text-gray-900 rounded-lg hover:bg-gray-200 w-full text-left">Perfil</a></li>}
              {role === "admin" && <li><a href="/roles/dashboardAdmin" class="block p-2 text-sm text-gray-900 rounded-lg hover:bg-gray-200 w-full text-left">Dashboard</a></li>}
              {role === "user" && <li><a href="/roles/dashboardUser" class="block p-2 text-sm text-gray-900 rounded-lg hover:bg-gray-200 w-full text-left">Dashboard</a></li>}
              {role === "guest" && <li><a href="/roles/dashboardGuest" class="block p-2 text-sm text-gray-900 rounded-lg hover:bg-gray-200 w-full text-left">Dashboard</a></li>}
              <li>
                <form action="/api/auth/signout">
                  <button type="submit" class="block p-2 text-sm text-gray-900 rounded-lg hover:bg-gray-200 w-full text-left">Cerrar Sesión</button>
                </form>
              </li>
            </ul>
          </div>
        </div>
      )}
    </div>
  </div>
</header>

{/* Cargar modales solo si no hay usuario */}
{!user && (
  <>
    <Login />
    <Registro />
    <script src="/src/components/js/modalHeader.js"></script>
  </>
)}

<script>
  function setupDropdown() {
    const avatar = document.getElementById('avatar') as HTMLElement;
    const dropdown = document.getElementById('dropdown-menu') as HTMLElement;

    if (!avatar || !dropdown) return;

    function toggleMenu() {
      const isHidden = dropdown.classList.toggle('hidden');
      localStorage.setItem('menuOpen', isHidden ? 'false' : 'true');
    }

    function closeMenu() {
      dropdown.classList.add('hidden');
      localStorage.setItem('menuOpen', 'false');
    }

    avatar.addEventListener('click', (event) => {
      event.stopPropagation();
      toggleMenu();
    });

    document.addEventListener('click', (event) => {
      const target = event.target as Node;
      if (!avatar.contains(target) && !dropdown.contains(target)) {
        closeMenu();
      }
    });

    // Verificar el estado del menú
    if (localStorage.getItem('menuOpen') === 'true') {
      dropdown.classList.remove('hidden');
    }
  }

  // Ejecutar setupDropdown en la carga inicial y después de cada navegación
  document.addEventListener('astro:page-load', setupDropdown);
</script>


